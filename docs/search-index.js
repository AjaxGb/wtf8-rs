var searchIndex = JSON.parse('{\
"wtf8_rs":{"doc":"wtf8-rs","t":[0,3,11,11,11,11,11,11,11,11,3,3,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,3,11,11,3,3,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["codepoint","CodePoint","from_u32_unchecked","from_u32","from_char","to_u32","to_char","to_char_lossy","decode_utf16","encode_utf16","DecodeUtf16","EncodeUtf16","wtf8","Wtf8","new","len","is_empty","ascii_byte_at","code_points","to_str","to_string_lossy","get","encode_utf16","get_unchecked","is_code_point_boundary","to_box","empty_box","to_arc","to_rc","make_ascii_lowercase","make_ascii_uppercase","to_ascii_lowercase","to_ascii_uppercase","is_ascii","eq_ignore_ascii_case","Wtf8Index","get","get_unchecked","ToStrError","valid_up_to","error_len","CodePoints","EncodeUtf16","wtf8buf","Wtf8Buf","new","with_capacity","from_string","reserve","reserve_exact","shrink_to_fit","capacity","from_str","clear","as_wtf8","as_mut_wtf8","push_str","push_wtf8","push_char","push","truncate","into_string","into_string_lossy","into_box","from_box","IntoStringError","wtf8","valid_up_to","error_len","CodePoint","Wtf8","Wtf8Buf","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","type_id","to_string","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_string","deref","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","cmp","cmp","cmp","cmp","cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","index","borrow","borrow_mut","from_str","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","next","size_hint","next","size_hint","next","size_hint","next","size_hint","extend","extend","extend","extend","extend","extend","from","from","from","from","as_ref","as_mut","clone","clone","clone","to_owned"],"q":["wtf8_rs","wtf8_rs::codepoint","","","","","","","","","","","wtf8_rs","wtf8_rs::wtf8","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","wtf8_rs","wtf8_rs::wtf8buf","","","","","","","","","","","","","","","","","","","","","","","","","wtf8_rs","","","","","","","","","","","","wtf8_rs::codepoint","","","","","","","","","","","","","","","","wtf8_rs","","","","wtf8_rs::wtf8","","","","","","","","","","","","","","","","","","","","","","","","","","wtf8_rs","","","","","","","","","","wtf8_rs::wtf8buf","","","","","","","","wtf8_rs","","","","wtf8_rs::wtf8","wtf8_rs","wtf8_rs::wtf8buf","wtf8_rs","wtf8_rs::wtf8","wtf8_rs","wtf8_rs::wtf8buf","wtf8_rs","","","","wtf8_rs::wtf8","","wtf8_rs","","wtf8_rs::wtf8buf","","wtf8_rs","","wtf8_rs::wtf8","wtf8_rs","wtf8_rs::wtf8buf","wtf8_rs","","wtf8_rs::wtf8","wtf8_rs","wtf8_rs::wtf8buf","wtf8_rs","","","","","","","","","","wtf8_rs::codepoint","","","","wtf8_rs::wtf8","","","","wtf8_rs","","","","","","","","","","","","","wtf8_rs::wtf8","wtf8_rs",""],"d":["A Unicode code point: from U+0000 to U+10FFFF.","A Unicode code point: from U+0000 to U+10FFFF.","Unsafely creates a new <code>CodePoint</code> without checking the …","Creates a new <code>CodePoint</code> if the value is a valid code …","Creates a new <code>CodePoint</code> from a <code>char</code>.","Returns the numeric value of the code point.","Optionally returns a Unicode scalar value for the code …","Returns a Unicode scalar value for the code point.","Decode potentially ill-formed UTF-16.","Encode potentially ill-formed UTF-16.","An iterator for decoding potentially ill-formed UTF-16.","An iterator for encoding potentially ill-formed UTF-16.","A WTF-8 slice.","A WTF-8 slice.","Coerces into a <code>Wtf8</code>. This accepts an <code>&str</code> argument.","Returns the length, in WTF-8 bytes.","Returns whether this is empty.","Returns the code point at <code>position</code> if it is in the ASCII …","Returns an iterator for the string’s code points.","Tries to convert the string to UTF-8 and return a <code>&str</code> …","Lossily converts the string to UTF-8. Returns a UTF-8 <code>&str</code>…","Returns a slice of the given string for the byte range.","Converts the WTF-8 string to potentially ill-formed UTF-16…","Returns a slice of the given string for the byte range.","Whether a given index is at a code point boundary.","Boxes this <code>Wtf8</code>.","Creates a boxed, empty <code>Wtf8</code>.","Boxes this <code>Wtf8</code> with <code>Arc</code>.","Boxes this <code>Wtf8</code> with <code>Rc</code>.","Converts this slice to its ASCII lower case equivalent …","Converts this slice to its ASCII upper case equivalent …","Returns a [<code>Wtf8Buf</code>] containing a copy of this slice where …","Returns a [<code>Wtf8Buf</code>] containing a copy of this slice where …","Checks if all bytes in this slice are within the ASCII …","Checks that two slices are an ASCII case-insensitive …","A helper trait to do <code>get</code> operation on <code>Wtf8</code>.","","","Errors which can occur when converting <code>Wtf8</code> to <code>str</code>.","Returns the index in the given string up to which valid …","The length provided is that of the invalid byte sequence …","Iterator of points over a string.","An iterator for encoding potentially ill-formed UTF-16 …","A WTF-8 dynamically sized, growable string.","A WTF-8 dynamically sized, growable string.","Creates a new, empty WTF-8 string.","Creates a new, empty WTF-8 string with pre-allocated …","Creates a WTF-8 string from a UTF-8 <code>String</code>.","Reserves capacity for at least <code>additional</code> more bytes to …","Reserves the minimum capacity for exactly <code>additional</code> more …","Shrinks the capacity of the vector as much as possible.","Returns the number of bytes that this string buffer can …","Creates a WTF-8 string from a UTF-8 <code>&str</code> slice.","Clears the string.","Returns the slice of this object.","Returns the slice of this object.","Append a UTF-8 slice at the end of the string.","Append a string with WTF-8 encoding.","Append a Unicode scalar value at the end of the string.","Append a code point at the end of the string.","Shortens a string to the specified length.","Consumes the WTF-8 string and tries to convert it to …","Consumes the WTF-8 string and converts it lossily to …","Converts this <code>Wtf8Buf</code> into a boxed <code>Wtf8</code>.","Converts a <code>Box<Wtf8></code> into a <code>Wtf8Buf</code>.","Errors which can occur when converting <code>Wtf8Buf</code> to <code>String</code>.","","Returns the index in the given string up to which valid …","The length provided is that of the invalid byte sequence …","A Unicode code point: from U+0000 to U+10FFFF.","A WTF-8 slice.","A WTF-8 dynamically sized, growable string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,0,4,4,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,0,0,0,1,1,1,1,1,1,1,1,1,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,2,2,2,2,4,4,4,4,4,4,4,4,4,4,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,5,5,1,2,4,5,6,2,4,5,6,1,1,2,2,4,4,5,5,6,6,1,2,4,5,6,1,2,4,5,6,2,5,5,5,5,5,5,5,5,5,7,7,8,8,9,9,10,10,5,5,5,5,5,5,1,5,5,5,5,5,1,4,5,2],"f":[null,null,[[["u32",15]],["codepoint",3]],[[["u32",15]],[["option",4],["codepoint",3]]],[[["char",15]],["codepoint",3]],[[],["u32",15]],[[],[["option",4],["char",15]]],[[],["char",15]],[[],["decodeutf16",3]],[[],["encodeutf16",3]],null,null,null,null,[[]],[[],["usize",15]],[[],["bool",15]],[[["usize",15]],["u8",15]],[[],["codepoints",3]],[[],[["tostrerror",3],["result",4],["str",15]]],[[],[["str",15],["cow",4]]],[[["wtf8index",8]],["option",4]],[[],["encodeutf16",3]],[[["wtf8index",8]]],[[["usize",15]],["bool",15]],[[],[["box",3],["wtf8",3]]],[[],[["box",3],["wtf8",3]]],[[],[["wtf8",3],["arc",3]]],[[],[["wtf8",3],["rc",3]]],[[]],[[]],[[],["wtf8buf",3]],[[],["wtf8buf",3]],[[],["bool",15]],[[],["bool",15]],null,[[["wtf8",3]],[["wtf8",3],["option",4]]],[[]],null,[[],["usize",15]],[[],["usize",15]],null,null,null,null,[[],["wtf8buf",3]],[[["usize",15]],["wtf8buf",3]],[[["string",3]],["wtf8buf",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[["str",15]],["wtf8buf",3]],[[]],[[],["wtf8",3]],[[],["wtf8",3]],[[["str",15]]],[[["wtf8",3]]],[[["char",15]]],[[["codepoint",3]]],[[["usize",15]]],[[],[["string",3],["result",4],["intostringerror",3]]],[[],["string",3]],[[],[["box",3],["wtf8",3]]],[[["box",3],["wtf8",3]],["wtf8buf",3]],null,null,[[],["usize",15]],[[],["usize",15]],null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["typeid",3]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],[[],["wtf8",3]],[[],["wtf8",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["codepoint",3]],["bool",15]],[[["codepoint",3]],["bool",15]],[[["wtf8",3]],["bool",15]],[[["wtf8",3]],["bool",15]],[[["tostrerror",3]],["bool",15]],[[["tostrerror",3]],["bool",15]],[[["wtf8buf",3]],["bool",15]],[[["wtf8buf",3]],["bool",15]],[[["intostringerror",3]],["bool",15]],[[["intostringerror",3]],["bool",15]],[[["codepoint",3]],["ordering",4]],[[["wtf8",3]],["ordering",4]],[[["tostrerror",3]],["ordering",4]],[[["wtf8buf",3]],["ordering",4]],[[["intostringerror",3]],["ordering",4]],[[["codepoint",3]],[["ordering",4],["option",4]]],[[["wtf8",3]],[["ordering",4],["option",4]]],[[["tostrerror",3]],[["ordering",4],["option",4]]],[[["wtf8buf",3]],[["ordering",4],["option",4]]],[[["intostringerror",3]],[["ordering",4],["option",4]]],[[],["wtf8",3]],[[],["wtf8",3]],[[],["wtf8",3]],[[["str",15]],[["infallible",4],["result",4]]],[[["intoiterator",8]],["wtf8buf",3]],[[["intoiterator",8]],["wtf8buf",3]],[[["intoiterator",8]],["wtf8buf",3]],[[["intoiterator",8]],["wtf8buf",3]],[[["intoiterator",8]],["wtf8buf",3]],[[["intoiterator",8]],["wtf8buf",3]],[[],[["option",4],["codepoint",3]]],[[]],[[],[["option",4],["u16",15]]],[[]],[[],[["option",4],["codepoint",3]]],[[]],[[],[["option",4],["u16",15]]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["char",15]]],[[["string",3]],["wtf8buf",3]],[[["str",15]],["wtf8buf",3]],[[["wtf8",3]],["wtf8buf",3]],[[],["wtf8",3]],[[],["wtf8",3]],[[],["codepoint",3]],[[],["tostrerror",3]],[[],["wtf8buf",3]],[[],["wtf8buf",3]]],"p":[[3,"CodePoint"],[3,"Wtf8"],[8,"Wtf8Index"],[3,"ToStrError"],[3,"Wtf8Buf"],[3,"IntoStringError"],[3,"DecodeUtf16"],[3,"EncodeUtf16"],[3,"CodePoints"],[3,"EncodeUtf16"]]}\
}');
initSearch(searchIndex);